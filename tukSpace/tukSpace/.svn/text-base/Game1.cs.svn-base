using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace tukSpace
{
    /// <summary>
    /// This is the main type for your game
    /// </summary>
    class Game1 : Microsoft.Xna.Framework.Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;

        KeyboardState oldKState;
        KeyboardState kState;
        MouseState oldMState;
        MouseState mState;
        bool gamePaused; //just for testing global key hook

        Ship pShip;

        //Universe theUniverse;
        //bool uniCreated;

        //putting all ships in the same list so i can mass handle em
        private List<tukSpace.Ship> allShips = new List<tukSpace.Ship>();
        public List<tukSpace.Ship> getAllShips() { return this.allShips; }
        public void setAllShips(List<tukSpace.Ship> allShips) { this.allShips = allShips; }

        HelmScreen helmScreen;
        TitleScreen titleScreen;
        TacNavScreen tacNavScreen;
        Screen curScreen;

        //waypoint system
        public Texture2D waypointText;
        public List<Vector2> waypointList = new List<Vector2>();

        //firing system
        public Texture2D firepointText;
        public List<Vector2> firepointList = new List<Vector2>();

        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            oldKState = Keyboard.GetState();
            this.IsMouseVisible = true;
            graphics.PreferredBackBufferHeight = 720;
            graphics.PreferredBackBufferWidth = 1280;
            //graphics.ToggleFullScreen();
            graphics.ApplyChanges();

            //just hacked in massive universe creation to see if it works
            //i know its slow - commented out
            /**theUniverse = new Universe(new Coordinates2(3, 3), new Coordinates2(5, 5));
            uniCreated = false;
            if (uniCreated == false)
            {
                System.Diagnostics.Stopwatch constructTimer = new System.Diagnostics.Stopwatch(); //timing the creation since i know its big
                constructTimer.Start();
                theUniverse.Construct();
                constructTimer.Stop();
                System.Console.WriteLine("Elapsed time: " + constructTimer.Elapsed.TotalSeconds.ToString());
            }**/

            pShip = new Ship (graphics.GraphicsDevice.Viewport.Width/2, graphics.GraphicsDevice.Viewport.Height/2, false, 0f, true,null);

            //Adding few NPShips just for test
            allShips.Add(new Ship(300, 300, true, 90, true, null));
            allShips.Add(new Ship(200, 100, false, 30, true, null));
            allShips.Add(new Ship(600, 700, true, "enemy1", true, null));
            allShips.Add(new Ship(100, 100, false, "enemy1", true, null));
            allShips.Add(new Ship(500, 200, true, "badprise", true, null));
            allShips.Add(new Ship(443, 223, true, "badprise", true, null));
            allShips.Add(new Ship(600,600, true, "badprise", true, null));

            gamePaused = false;

            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            helmScreen = new HelmScreen(Keyboard.GetState(), Mouse.GetState(), pShip, this, allShips, graphics.GraphicsDevice.Viewport);
            titleScreen = new TitleScreen();
            tacNavScreen = new TacNavScreen(Keyboard.GetState(), Mouse.GetState(), pShip, this, allShips, graphics.GraphicsDevice.Viewport);
            spriteBatch = new SpriteBatch(GraphicsDevice);
            waypointText = Content.Load<Texture2D>("waypoint");
            firepointText = Content.Load<Texture2D>("firepoint");

            //Loading content for the NPShips. Using the overloaded LoadContent method so
            //that if an texture isnt set in the constructor, "enterprise90t" will be used.
            foreach (Ship currentShip in allShips) { currentShip.LoadContent(Content); }

            pShip.LoadContent(Content, "enterprise90t");

            helmScreen.Initialize(Content);
            titleScreen.Initialize(Content);
            tacNavScreen.Initialize(Content);

            curScreen = titleScreen;
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        /// moved curScreen.HandleInput() to Game1.HandleInput() to allow screen independant input.
        protected override void Update(GameTime gameTime)
        {
            // Allows the game to exit
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed)
                this.Exit();

            pShip.Update(gameTime);
            //Coordinates5 garbage_coords = theUniverse.UpdateLocation(pShip.myLocation,pShip.myPosition);
            //update other ships
            foreach (Ship currentShip in allShips)
            {
                currentShip.Update(gameTime);
                if (tukHelper.determineDistance(currentShip.myPosition, pShip.myPosition) > 1000f) //should we still draw the ship or is it too far away?
                {
                    currentShip.visible = false;
                }
                else //i guess we are close enough so lets set it to true
                {
                    currentShip.visible = true;
                }
            }
            ;
            if (curScreen.ReleaseMe == true)
            {
                curScreen = helmScreen;
            }
            HandleInput(gameTime); //calls our global input hook, which passes any unprocessed input to the currentitleScreen
        
            base.Update(gameTime);
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.Black);
            curScreen.Draw(gameTime, spriteBatch);
            base.Draw(gameTime);
        }

        /// <summary>
        /// Handles all input. It checks for any input that is not dependant
        /// on current screen, if nothing is found, the input is passed to the current screen.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        /// moved curScreen.HandleInput() to Game1.HandleInput() to allow screen independant input.
        private void HandleInput(GameTime gameTime)
        {
            kState = Keyboard.GetState();
            mState = Mouse.GetState();
            if (kState.IsKeyDown(Keys.Escape))
            {
                if (!oldKState.IsKeyDown(Keys.Escape))
                {
                    gamePaused = !gamePaused;
                    System.Console.WriteLine("-------------\nPaused: " + gamePaused.ToString());
                }
            }
            if (kState.IsKeyDown(Keys.F1))
            {
                if (!oldKState.IsKeyDown(Keys.F1))
                {
                    curScreen = helmScreen;
                }
            }
                if (kState.IsKeyDown(Keys.F2))
            {
                if (!oldKState.IsKeyDown(Keys.F2))
                {
                    curScreen = tacNavScreen;
                }
            }
            else
            {
                curScreen.HandleInput(gameTime, kState, mState);
            }
                oldKState = kState;
                oldMState = mState;
        }

    }
}
